const process = require('process'); // Import the 'process' module

process.on('uncaughtException', (err) => {
  console.log('UNCAUGHT EXCEPTION ------------->>>>');
  console.log(err);
  process.exit(1);
});

const fs = require('fs');
const https = require('https');
const http = require('http');

const mongoose = require('mongoose');
const dotenv = require('dotenv');
dotenv.config();

const config = require('./config'); // IMPORTANT! Here, we are configuring mongoose for entire application. If this is not required here the mongoose connection will not be available throughout the application. (Do not delete this even when this variable is not being used anywhere)
const app = require('../app').app;

// CONFIGURE SERVER (HTTP & HTTPS)
const http_server = http.createServer(app);

const https_server = https.createServer(
  {
    key: fs.readFileSync(`${__dirname}/../cert/server.key.pem`, 'utf-8'),
    cert: fs.readFileSync(`${__dirname}/../cert/server.cert.pem`, 'utf-8'),
    ca: fs.readFileSync(`${__dirname}/../cert/ca.cert.pem`, 'utf-8'),
  },
  app
);

// Server ports
const http_port = +(process.env.HTTP_PORT || 3000);
const https_port = +(process.env.HTTPS_PORT || 3443);

http_server.on('listening', () => {
  console.log(`HTTP server running on port ${http_port}`);
  console.log(`HTTPS server running on port ${https_port}`);
});

http_server.on('error', (err) => {
  console.log(`Error starting HTTP server ðŸ’¥ðŸ’¥ðŸ’¥`);
});

https_server.on('listening', () => {
  console.log(`HTTPS server running on port ${https_port}`);
});

https_server.on('error', (err) => {
  console.log(`Error starting HTTPS server ðŸ’¥ðŸ’¥ðŸ’¥`);
});

// Start server (HTTP & HTTPS)
http_server.listen(http_port, '0.0.0.0', 0);

if (process.env.MANUAL_HTTPS === 'true')
  https_server.listen(https_port, '0.0.0.0', 0);

process.on('unhandledRejection', (err) => {
  console.log('unhandled rejection... Exiting application');
  console.log(err.name, err.message);
  console.log(err);

  http_server.close(() => {
    process.exit(1);
  });

  if (process.env.MANUAL_HTTPS === 'true') {
    https_server.close(() => {
      process.exit(1);
    });
  }
});
